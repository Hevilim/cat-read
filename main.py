import os
import io
import telebot
from dotenv import load_dotenv
from database.core import init_db
from utils.extractor import parse
from indexer import index_doc, search
from utils.summarizer import summarize_text_llm
from database.crud import add_user, save_file, get_files, get_file, delete_file
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def handle_start(message):
    add_user(message.from_user)
    welcome = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /help ‚Äî –ø–æ–º–æ—â—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n"
        "üîπ /list ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª."
    )
    bot.send_message(message.chat.id, welcome)


@bot.message_handler(commands=['help'])
def handle_help(message):
    text = (
        "‚ÑπÔ∏è <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:</b>\n\n"
        "‚Äî –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ</b> ‚Äî –±–æ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç <b>–ø–æ–∏—Å–∫</b> –ø–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º.\n"
        "‚Äî –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–∞–π–ª</b> ‚Äî –æ–Ω –±—É–¥–µ—Ç <b>—Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω</b>.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /list ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n"
    )
    bot.send_message(message.chat.id, text, parse_mode="HTML")


@bot.message_handler(commands=['list'])
def handle_list(message):
    files = get_files(message.from_user.id)
    if not files:
        bot.send_message(message.chat.id, "üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    for f in files:
        text = (
            f"üìÑ <b>{f.filename}</b>\n  |\n"
            f"üïí –î–æ–±–∞–≤–ª–µ–Ω–æ: {f.uploaded_at.strftime('%Y-%m-%d %H:%M')}"
        )
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üß† –í—ã–∂–∏–º–∫–∞", callback_data=f"summary_{f.id}"))
        markup.add(InlineKeyboardButton("‚¨á –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{f.id}"))
        markup.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{f.id}"))
        bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data.startswith("summary_"))
def handle_summary(call):
    file_id = int(call.data.split("_")[1])
    f = get_file(file_id)
    if f:
        try:
            summary = summarize_text_llm(f.content)
            bot.send_message(
                call.message.chat.id,
                f"üß† <b>–í—ã–∂–∏–º–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ {f.filename}:</b>\n\n{summary}",
                parse_mode="HTML"
            )
        except Exception as e:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∂–∏–º–∫—É.")
            print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–∂–∏–º–∫–∏:", e)
    else:
        bot.answer_callback_query(call.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("download_"))
def handle_download(call):
    file_id = int(call.data.split("_")[1])
    f = get_file(file_id)
    if f:
        bot.send_document(call.message.chat.id, InputFile(io.BytesIO(f.content.encode()), file_name=f.filename))


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def handle_delete(call):
    file_id = int(call.data.split("_")[1])
    success = delete_file(file_id)
    if success:
        bot.edit_message_text("‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω.", chat_id=call.message.chat.id, message_id=call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")


@bot.message_handler(content_types=['document'])
def handle_file(message):
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    content = parse(downloaded_file, message.document.mime_type)

    if not content.strip():
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–∫–∞–Ω –∏–ª–∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π PDF.")
        return

    file_id = save_file(message.from_user.id, message.document.file_name, content)
    index_doc(file_id, content)
    bot.reply_to(message, "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω.")


@bot.message_handler(func=lambda m: True)
def handle_search(message):
    results = search(message.text)
    if not results:
        bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    found = False
    for file_id in results:
        f = get_file(int(file_id))
        if not f:
            continue

        snippet = get_snippet(f.content, message.text)
        if not snippet.strip():
            continue

        found = True
        text = f"üìÑ <b>{f.filename}</b>\n  |\nüîç ...{snippet}..."
        bot.send_message(message.chat.id, text, parse_mode="HTML")

    if not found:
        bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def get_snippet(text, query, window=20):
    idx = text.lower().find(query.lower())
    if idx == -1:
        return ""
    start = max(0, idx - window)
    end = min(len(text), idx + len(query) + window)
    return text[start:end]


if __name__ == '__main__':
    init_db()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)